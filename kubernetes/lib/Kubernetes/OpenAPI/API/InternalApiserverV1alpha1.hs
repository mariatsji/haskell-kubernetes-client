{-
   Kubernetes

   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   OpenAPI Version: 3.0.1
   Kubernetes API version: release-1.20
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Kubernetes.OpenAPI.API.InternalApiserverV1alpha1
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Kubernetes.OpenAPI.API.InternalApiserverV1alpha1 where

import Kubernetes.OpenAPI.Core
import Kubernetes.OpenAPI.MimeTypes
import Kubernetes.OpenAPI.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** InternalApiserverV1alpha1

-- *** createStorageVersion

-- | @POST \/apis\/internal.apiserver.k8s.io\/v1alpha1\/storageversions@
-- 
-- create a StorageVersion
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
createStorageVersion
  :: (Consumes CreateStorageVersion contentType, MimeRender contentType V1alpha1StorageVersion)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> V1alpha1StorageVersion -- ^ "body"
  -> KubernetesRequest CreateStorageVersion contentType V1alpha1StorageVersion accept
createStorageVersion _  _ body =
  _mkRequest "POST" ["/apis/internal.apiserver.k8s.io/v1alpha1/storageversions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)
    `setBodyParam` body

data CreateStorageVersion 
instance HasBodyParam CreateStorageVersion V1alpha1StorageVersion 

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam CreateStorageVersion Pretty where
  applyOptionalParam req (Pretty xs) =
    req `addQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "dryRun" - When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
instance HasOptionalParam CreateStorageVersion DryRun where
  applyOptionalParam req (DryRun xs) =
    req `addQuery` toQuery ("dryRun", Just xs)

-- | /Optional Param/ "fieldManager" - fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
instance HasOptionalParam CreateStorageVersion FieldManager where
  applyOptionalParam req (FieldManager xs) =
    req `addQuery` toQuery ("fieldManager", Just xs)

-- | @*/*@
instance MimeType mtype => Consumes CreateStorageVersion mtype

-- | @application/json@
instance Produces CreateStorageVersion MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces CreateStorageVersion MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces CreateStorageVersion MimeYaml


-- *** deleteCollectionStorageVersion

-- | @DELETE \/apis\/internal.apiserver.k8s.io\/v1alpha1\/storageversions@
-- 
-- delete collection of StorageVersion
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
deleteCollectionStorageVersion
  :: (Consumes DeleteCollectionStorageVersion contentType)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> KubernetesRequest DeleteCollectionStorageVersion contentType V1Status accept
deleteCollectionStorageVersion _  _ =
  _mkRequest "DELETE" ["/apis/internal.apiserver.k8s.io/v1alpha1/storageversions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)

data DeleteCollectionStorageVersion 
instance HasBodyParam DeleteCollectionStorageVersion V1DeleteOptions 

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam DeleteCollectionStorageVersion Pretty where
  applyOptionalParam req (Pretty xs) =
    req `addQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "continue" - The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
instance HasOptionalParam DeleteCollectionStorageVersion Continue where
  applyOptionalParam req (Continue xs) =
    req `addQuery` toQuery ("continue", Just xs)

-- | /Optional Param/ "dryRun" - When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
instance HasOptionalParam DeleteCollectionStorageVersion DryRun where
  applyOptionalParam req (DryRun xs) =
    req `addQuery` toQuery ("dryRun", Just xs)

-- | /Optional Param/ "fieldSelector" - A selector to restrict the list of returned objects by their fields. Defaults to everything.
instance HasOptionalParam DeleteCollectionStorageVersion FieldSelector where
  applyOptionalParam req (FieldSelector xs) =
    req `addQuery` toQuery ("fieldSelector", Just xs)

-- | /Optional Param/ "gracePeriodSeconds" - The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
instance HasOptionalParam DeleteCollectionStorageVersion GracePeriodSeconds where
  applyOptionalParam req (GracePeriodSeconds xs) =
    req `addQuery` toQuery ("gracePeriodSeconds", Just xs)

-- | /Optional Param/ "labelSelector" - A selector to restrict the list of returned objects by their labels. Defaults to everything.
instance HasOptionalParam DeleteCollectionStorageVersion LabelSelector where
  applyOptionalParam req (LabelSelector xs) =
    req `addQuery` toQuery ("labelSelector", Just xs)

-- | /Optional Param/ "limit" - limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
instance HasOptionalParam DeleteCollectionStorageVersion Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "orphanDependents" - Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
instance HasOptionalParam DeleteCollectionStorageVersion OrphanDependents where
  applyOptionalParam req (OrphanDependents xs) =
    req `addQuery` toQuery ("orphanDependents", Just xs)

-- | /Optional Param/ "propagationPolicy" - Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
instance HasOptionalParam DeleteCollectionStorageVersion PropagationPolicy where
  applyOptionalParam req (PropagationPolicy xs) =
    req `addQuery` toQuery ("propagationPolicy", Just xs)

-- | /Optional Param/ "resourceVersion" - resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
instance HasOptionalParam DeleteCollectionStorageVersion ResourceVersion where
  applyOptionalParam req (ResourceVersion xs) =
    req `addQuery` toQuery ("resourceVersion", Just xs)

-- | /Optional Param/ "resourceVersionMatch" - resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
instance HasOptionalParam DeleteCollectionStorageVersion ResourceVersionMatch where
  applyOptionalParam req (ResourceVersionMatch xs) =
    req `addQuery` toQuery ("resourceVersionMatch", Just xs)

-- | /Optional Param/ "timeoutSeconds" - Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
instance HasOptionalParam DeleteCollectionStorageVersion TimeoutSeconds where
  applyOptionalParam req (TimeoutSeconds xs) =
    req `addQuery` toQuery ("timeoutSeconds", Just xs)

-- | @*/*@
instance MimeType mtype => Consumes DeleteCollectionStorageVersion mtype

-- | @application/json@
instance Produces DeleteCollectionStorageVersion MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces DeleteCollectionStorageVersion MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces DeleteCollectionStorageVersion MimeYaml


-- *** deleteStorageVersion

-- | @DELETE \/apis\/internal.apiserver.k8s.io\/v1alpha1\/storageversions\/{name}@
-- 
-- delete a StorageVersion
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
deleteStorageVersion
  :: (Consumes DeleteStorageVersion contentType)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Name -- ^ "name" -  name of the StorageVersion
  -> KubernetesRequest DeleteStorageVersion contentType V1Status accept
deleteStorageVersion _  _ (Name name) =
  _mkRequest "DELETE" ["/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/",toPath name]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)

data DeleteStorageVersion 
instance HasBodyParam DeleteStorageVersion V1DeleteOptions 

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam DeleteStorageVersion Pretty where
  applyOptionalParam req (Pretty xs) =
    req `addQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "dryRun" - When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
instance HasOptionalParam DeleteStorageVersion DryRun where
  applyOptionalParam req (DryRun xs) =
    req `addQuery` toQuery ("dryRun", Just xs)

-- | /Optional Param/ "gracePeriodSeconds" - The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
instance HasOptionalParam DeleteStorageVersion GracePeriodSeconds where
  applyOptionalParam req (GracePeriodSeconds xs) =
    req `addQuery` toQuery ("gracePeriodSeconds", Just xs)

-- | /Optional Param/ "orphanDependents" - Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
instance HasOptionalParam DeleteStorageVersion OrphanDependents where
  applyOptionalParam req (OrphanDependents xs) =
    req `addQuery` toQuery ("orphanDependents", Just xs)

-- | /Optional Param/ "propagationPolicy" - Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
instance HasOptionalParam DeleteStorageVersion PropagationPolicy where
  applyOptionalParam req (PropagationPolicy xs) =
    req `addQuery` toQuery ("propagationPolicy", Just xs)

-- | @*/*@
instance MimeType mtype => Consumes DeleteStorageVersion mtype

-- | @application/json@
instance Produces DeleteStorageVersion MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces DeleteStorageVersion MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces DeleteStorageVersion MimeYaml


-- *** getAPIResources

-- | @GET \/apis\/internal.apiserver.k8s.io\/v1alpha1\/@
-- 
-- get available resources
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
getAPIResources
  :: Accept accept -- ^ request accept ('MimeType')
  -> KubernetesRequest GetAPIResources MimeNoContent V1APIResourceList accept
getAPIResources  _ =
  _mkRequest "GET" ["/apis/internal.apiserver.k8s.io/v1alpha1/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)

data GetAPIResources  
-- | @application/json@
instance Produces GetAPIResources MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces GetAPIResources MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces GetAPIResources MimeYaml


-- *** listStorageVersion

-- | @GET \/apis\/internal.apiserver.k8s.io\/v1alpha1\/storageversions@
-- 
-- list or watch objects of kind StorageVersion
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
listStorageVersion
  :: Accept accept -- ^ request accept ('MimeType')
  -> KubernetesRequest ListStorageVersion MimeNoContent V1alpha1StorageVersionList accept
listStorageVersion  _ =
  _mkRequest "GET" ["/apis/internal.apiserver.k8s.io/v1alpha1/storageversions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)

data ListStorageVersion  

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam ListStorageVersion Pretty where
  applyOptionalParam req (Pretty xs) =
    req `addQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "allowWatchBookmarks" - allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.
instance HasOptionalParam ListStorageVersion AllowWatchBookmarks where
  applyOptionalParam req (AllowWatchBookmarks xs) =
    req `addQuery` toQuery ("allowWatchBookmarks", Just xs)

-- | /Optional Param/ "continue" - The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
instance HasOptionalParam ListStorageVersion Continue where
  applyOptionalParam req (Continue xs) =
    req `addQuery` toQuery ("continue", Just xs)

-- | /Optional Param/ "fieldSelector" - A selector to restrict the list of returned objects by their fields. Defaults to everything.
instance HasOptionalParam ListStorageVersion FieldSelector where
  applyOptionalParam req (FieldSelector xs) =
    req `addQuery` toQuery ("fieldSelector", Just xs)

-- | /Optional Param/ "labelSelector" - A selector to restrict the list of returned objects by their labels. Defaults to everything.
instance HasOptionalParam ListStorageVersion LabelSelector where
  applyOptionalParam req (LabelSelector xs) =
    req `addQuery` toQuery ("labelSelector", Just xs)

-- | /Optional Param/ "limit" - limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
instance HasOptionalParam ListStorageVersion Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "resourceVersion" - resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
instance HasOptionalParam ListStorageVersion ResourceVersion where
  applyOptionalParam req (ResourceVersion xs) =
    req `addQuery` toQuery ("resourceVersion", Just xs)

-- | /Optional Param/ "resourceVersionMatch" - resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
instance HasOptionalParam ListStorageVersion ResourceVersionMatch where
  applyOptionalParam req (ResourceVersionMatch xs) =
    req `addQuery` toQuery ("resourceVersionMatch", Just xs)

-- | /Optional Param/ "timeoutSeconds" - Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
instance HasOptionalParam ListStorageVersion TimeoutSeconds where
  applyOptionalParam req (TimeoutSeconds xs) =
    req `addQuery` toQuery ("timeoutSeconds", Just xs)

-- | /Optional Param/ "watch" - Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
instance HasOptionalParam ListStorageVersion Watch where
  applyOptionalParam req (Watch xs) =
    req `addQuery` toQuery ("watch", Just xs)
-- | @application/json@
instance Produces ListStorageVersion MimeJSON
-- | @application/json;stream=watch@
instance Produces ListStorageVersion MimeJsonstreamwatch
-- | @application/vnd.kubernetes.protobuf@
instance Produces ListStorageVersion MimeVndKubernetesProtobuf
-- | @application/vnd.kubernetes.protobuf;stream=watch@
instance Produces ListStorageVersion MimeVndKubernetesProtobufstreamwatch
-- | @application/yaml@
instance Produces ListStorageVersion MimeYaml


-- *** patchStorageVersion

-- | @PATCH \/apis\/internal.apiserver.k8s.io\/v1alpha1\/storageversions\/{name}@
-- 
-- partially update the specified StorageVersion
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
patchStorageVersion
  :: (Consumes PatchStorageVersion contentType, MimeRender contentType Body)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Body -- ^ "body"
  -> Name -- ^ "name" -  name of the StorageVersion
  -> KubernetesRequest PatchStorageVersion contentType V1alpha1StorageVersion accept
patchStorageVersion _  _ body (Name name) =
  _mkRequest "PATCH" ["/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/",toPath name]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)
    `setBodyParam` body

data PatchStorageVersion 
instance HasBodyParam PatchStorageVersion Body 

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam PatchStorageVersion Pretty where
  applyOptionalParam req (Pretty xs) =
    req `addQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "dryRun" - When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
instance HasOptionalParam PatchStorageVersion DryRun where
  applyOptionalParam req (DryRun xs) =
    req `addQuery` toQuery ("dryRun", Just xs)

-- | /Optional Param/ "fieldManager" - fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
instance HasOptionalParam PatchStorageVersion FieldManager where
  applyOptionalParam req (FieldManager xs) =
    req `addQuery` toQuery ("fieldManager", Just xs)

-- | /Optional Param/ "force" - Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
instance HasOptionalParam PatchStorageVersion Force where
  applyOptionalParam req (Force xs) =
    req `addQuery` toQuery ("force", Just xs)

-- | @application/apply-patch+yaml@
instance Consumes PatchStorageVersion MimeApplyPatchyaml
-- | @application/json-patch+json@
instance Consumes PatchStorageVersion MimeJsonPatchjson
-- | @application/merge-patch+json@
instance Consumes PatchStorageVersion MimeMergePatchjson
-- | @application/strategic-merge-patch+json@
instance Consumes PatchStorageVersion MimeStrategicMergePatchjson

-- | @application/json@
instance Produces PatchStorageVersion MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces PatchStorageVersion MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces PatchStorageVersion MimeYaml


-- *** patchStorageVersionStatus

-- | @PATCH \/apis\/internal.apiserver.k8s.io\/v1alpha1\/storageversions\/{name}\/status@
-- 
-- partially update status of the specified StorageVersion
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
patchStorageVersionStatus
  :: (Consumes PatchStorageVersionStatus contentType, MimeRender contentType Body)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Body -- ^ "body"
  -> Name -- ^ "name" -  name of the StorageVersion
  -> KubernetesRequest PatchStorageVersionStatus contentType V1alpha1StorageVersion accept
patchStorageVersionStatus _  _ body (Name name) =
  _mkRequest "PATCH" ["/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/",toPath name,"/status"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)
    `setBodyParam` body

data PatchStorageVersionStatus 
instance HasBodyParam PatchStorageVersionStatus Body 

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam PatchStorageVersionStatus Pretty where
  applyOptionalParam req (Pretty xs) =
    req `addQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "dryRun" - When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
instance HasOptionalParam PatchStorageVersionStatus DryRun where
  applyOptionalParam req (DryRun xs) =
    req `addQuery` toQuery ("dryRun", Just xs)

-- | /Optional Param/ "fieldManager" - fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
instance HasOptionalParam PatchStorageVersionStatus FieldManager where
  applyOptionalParam req (FieldManager xs) =
    req `addQuery` toQuery ("fieldManager", Just xs)

-- | /Optional Param/ "force" - Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
instance HasOptionalParam PatchStorageVersionStatus Force where
  applyOptionalParam req (Force xs) =
    req `addQuery` toQuery ("force", Just xs)

-- | @application/apply-patch+yaml@
instance Consumes PatchStorageVersionStatus MimeApplyPatchyaml
-- | @application/json-patch+json@
instance Consumes PatchStorageVersionStatus MimeJsonPatchjson
-- | @application/merge-patch+json@
instance Consumes PatchStorageVersionStatus MimeMergePatchjson
-- | @application/strategic-merge-patch+json@
instance Consumes PatchStorageVersionStatus MimeStrategicMergePatchjson

-- | @application/json@
instance Produces PatchStorageVersionStatus MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces PatchStorageVersionStatus MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces PatchStorageVersionStatus MimeYaml


-- *** readStorageVersion

-- | @GET \/apis\/internal.apiserver.k8s.io\/v1alpha1\/storageversions\/{name}@
-- 
-- read the specified StorageVersion
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
readStorageVersion
  :: Accept accept -- ^ request accept ('MimeType')
  -> Name -- ^ "name" -  name of the StorageVersion
  -> KubernetesRequest ReadStorageVersion MimeNoContent V1alpha1StorageVersion accept
readStorageVersion  _ (Name name) =
  _mkRequest "GET" ["/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/",toPath name]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)

data ReadStorageVersion  

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam ReadStorageVersion Pretty where
  applyOptionalParam req (Pretty xs) =
    req `addQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "exact" - Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
instance HasOptionalParam ReadStorageVersion Exact where
  applyOptionalParam req (Exact xs) =
    req `addQuery` toQuery ("exact", Just xs)

-- | /Optional Param/ "export" - Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
instance HasOptionalParam ReadStorageVersion Export where
  applyOptionalParam req (Export xs) =
    req `addQuery` toQuery ("export", Just xs)
-- | @application/json@
instance Produces ReadStorageVersion MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces ReadStorageVersion MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces ReadStorageVersion MimeYaml


-- *** readStorageVersionStatus

-- | @GET \/apis\/internal.apiserver.k8s.io\/v1alpha1\/storageversions\/{name}\/status@
-- 
-- read status of the specified StorageVersion
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
readStorageVersionStatus
  :: Accept accept -- ^ request accept ('MimeType')
  -> Name -- ^ "name" -  name of the StorageVersion
  -> KubernetesRequest ReadStorageVersionStatus MimeNoContent V1alpha1StorageVersion accept
readStorageVersionStatus  _ (Name name) =
  _mkRequest "GET" ["/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/",toPath name,"/status"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)

data ReadStorageVersionStatus  

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam ReadStorageVersionStatus Pretty where
  applyOptionalParam req (Pretty xs) =
    req `addQuery` toQuery ("pretty", Just xs)
-- | @application/json@
instance Produces ReadStorageVersionStatus MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces ReadStorageVersionStatus MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces ReadStorageVersionStatus MimeYaml


-- *** replaceStorageVersion

-- | @PUT \/apis\/internal.apiserver.k8s.io\/v1alpha1\/storageversions\/{name}@
-- 
-- replace the specified StorageVersion
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
replaceStorageVersion
  :: (Consumes ReplaceStorageVersion contentType, MimeRender contentType V1alpha1StorageVersion)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> V1alpha1StorageVersion -- ^ "body"
  -> Name -- ^ "name" -  name of the StorageVersion
  -> KubernetesRequest ReplaceStorageVersion contentType V1alpha1StorageVersion accept
replaceStorageVersion _  _ body (Name name) =
  _mkRequest "PUT" ["/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/",toPath name]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)
    `setBodyParam` body

data ReplaceStorageVersion 
instance HasBodyParam ReplaceStorageVersion V1alpha1StorageVersion 

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam ReplaceStorageVersion Pretty where
  applyOptionalParam req (Pretty xs) =
    req `addQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "dryRun" - When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
instance HasOptionalParam ReplaceStorageVersion DryRun where
  applyOptionalParam req (DryRun xs) =
    req `addQuery` toQuery ("dryRun", Just xs)

-- | /Optional Param/ "fieldManager" - fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
instance HasOptionalParam ReplaceStorageVersion FieldManager where
  applyOptionalParam req (FieldManager xs) =
    req `addQuery` toQuery ("fieldManager", Just xs)

-- | @*/*@
instance MimeType mtype => Consumes ReplaceStorageVersion mtype

-- | @application/json@
instance Produces ReplaceStorageVersion MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces ReplaceStorageVersion MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces ReplaceStorageVersion MimeYaml


-- *** replaceStorageVersionStatus

-- | @PUT \/apis\/internal.apiserver.k8s.io\/v1alpha1\/storageversions\/{name}\/status@
-- 
-- replace status of the specified StorageVersion
-- 
-- AuthMethod: 'AuthApiKeyBearerToken'
-- 
replaceStorageVersionStatus
  :: (Consumes ReplaceStorageVersionStatus contentType, MimeRender contentType V1alpha1StorageVersion)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> V1alpha1StorageVersion -- ^ "body"
  -> Name -- ^ "name" -  name of the StorageVersion
  -> KubernetesRequest ReplaceStorageVersionStatus contentType V1alpha1StorageVersion accept
replaceStorageVersionStatus _  _ body (Name name) =
  _mkRequest "PUT" ["/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/",toPath name,"/status"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerToken)
    `setBodyParam` body

data ReplaceStorageVersionStatus 
instance HasBodyParam ReplaceStorageVersionStatus V1alpha1StorageVersion 

-- | /Optional Param/ "pretty" - If 'true', then the output is pretty printed.
instance HasOptionalParam ReplaceStorageVersionStatus Pretty where
  applyOptionalParam req (Pretty xs) =
    req `addQuery` toQuery ("pretty", Just xs)

-- | /Optional Param/ "dryRun" - When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
instance HasOptionalParam ReplaceStorageVersionStatus DryRun where
  applyOptionalParam req (DryRun xs) =
    req `addQuery` toQuery ("dryRun", Just xs)

-- | /Optional Param/ "fieldManager" - fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
instance HasOptionalParam ReplaceStorageVersionStatus FieldManager where
  applyOptionalParam req (FieldManager xs) =
    req `addQuery` toQuery ("fieldManager", Just xs)

-- | @*/*@
instance MimeType mtype => Consumes ReplaceStorageVersionStatus mtype

-- | @application/json@
instance Produces ReplaceStorageVersionStatus MimeJSON
-- | @application/vnd.kubernetes.protobuf@
instance Produces ReplaceStorageVersionStatus MimeVndKubernetesProtobuf
-- | @application/yaml@
instance Produces ReplaceStorageVersionStatus MimeYaml

